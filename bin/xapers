#!/usr/bin/env python

import os
import sys
import xapers
import xapers.cli
import xapers.source
import logging
import argparse

########################################################################

# combine a list of terms with spaces between, so that simple queries
# don't have to be quoted at the shell level.
def make_query_string(terms, require=True):
    string = str.join(' ', terms)
    if string == '':
        if require:
            logging.error("Must specify a search term.")
            sys.exit(1)
        else:
            string = '*'
    return string

def import_nci():
    try:
        import xapers.nci
    except ImportError:
        logging.error("The python-urwid package does not appear to be installed.")
        logging.error("Please install to be able to use the curses UI.")
        sys.exit(1)

########################################################################

epilog="""
The xapers document store is specified by the XAPERS_ROOT environment
variable, or defaults to '~/.xapers/docs' if not specified (the
directory is allowed to be a symlink).
"""

def_search_terms="""
Free-form text to match against indexed document
text, or the following prefixes can be used to match against
specific document metadata:
    id:<docid>               Xapers document id
    author:<string>          string in authors (also a:)
    title:<string>           string in title (also t:)
    tag:<tag>                specific user tags
    <source>:<id>            specific sid string
    source:<lib>             specific source
    key:<key>                specific bibtex citation key

The string '*' will match all documents.
"""

def_source="""
This is a URL, a source ID string of the form
'<source>:<id>', or a bibtex file
"""

########################################################################

if __name__ == '__main__':

    # create the top-level parser
    parser = argparse.ArgumentParser(epilog=epilog)
    parser.add_argument('--version', action='version', version='Ha!')
    subparsers = parser.add_subparsers(dest="cmd", help='sub-command help')

    # add
    hmsg = 'Add a new document or update existing. If provided, search should match a single document'
    parser_add = subparsers.add_parser('add', help=hmsg)
    parser_add.add_argument('search')
    parser_add.add_argument('--source', help='source for retrieving bibtex. ' + def_source)
    parser_add.add_argument('--file', help='file to index and archive')
    parser_add.add_argument('--tag', metavar='tag', nargs='*',
                            help='initial tags',
                            default=['new'])
    parser_add.add_argument('--prompt', action='store_true',
                               help='prompt for unspecified options')
    parser_add.add_argument('--view', action='store_true',
                               help='view entry after adding')
    # delete
    parser_delete = subparsers.add_parser('delete', help='Delete documents from database')
    parser_delete.add_argument('search')
    parser_delete.add_argument('--noprompt', action='store_true',
                               help='do not prompt to confirm deletion')
    # restore
    parser_restore = subparsers.add_parser('restore', help='Restore database from xapers root')
    # tag
    # TODO: add validator that ensures all tags are prefixed correctly
    parser_tag = subparsers.add_parser('tag', help='Add/remove tags')
    parser_tag.add_argument('tags', metavar='tag', nargs='+')
    parser_tag.add_argument('search')
    # search
    parser_search = subparsers.add_parser('search', help='Search for documents')
    parser_search.add_argument('search')
    parser_search.add_argument('--limit', type=int,
                               help='limit number of results returned',
                               default=20)
    parser_search.add_argument('--output',
                               choices=['summary','bibtex','tags','sources','keys','files'],
                               help='output format',
                               default='summary')
    # bibtex
    hmsg = 'Short for \"search --output=bibtex\"'
    parser_bibtex = subparsers.add_parser('bibtex', help=hmsg)
    parser_bibtex.add_argument('search')
    # show
    parser_show = subparsers.add_parser('show', help='View search in curses UI')
    parser_show.add_argument('search')
    # count
    parser_count = subparsers.add_parser('count', help='Count matches')
    parser_count.add_argument('search')
    # export
    hmsg = 'Export documents to a directory of files named for document titles'
    parser_export = subparsers.add_parser('export', help=hmsg)
    parser_export.add_argument('dir')
    parser_export.add_argument('search')
    # sources
    parser_sources = subparsers.add_parser('sources', help='List available sources')
    # source2bib
    hmsg = 'retrieve bibtex for source and 70 print to stdout'
    parser_source2bib = subparsers.add_parser('source2bib', help=hmsg)
    parser_source2bib.add_argument('source', help='source. ' + def_source)
    # scandoc
    parser_scandoc = subparsers.add_parser('scandoc', help='Scan a file for source IDs')
    parser_scandoc.add_argument('file')

    args = parser.parse_args()
    print args


    if len(sys.argv) > 1:
        cmd = sys.argv[1]
    else:
        cmd = []

    xroot = os.getenv('XAPERS_ROOT',
                      os.path.expanduser(os.path.join('~','.xapers','docs')))

    # set up logging
    logging.basicConfig(level = logging.WARNING,
                        format='%(levelname)s: %(message)s')

    ########################################
    if cmd in ['add','a']:
        cli = xapers.cli.UI(xroot)

        tags = None
        infile = None
        source = None
        prompt = False
        view = False
        query_string = None

        argc = 2
        while True:
            if argc >= len(sys.argv):
                break
            elif '--source=' in sys.argv[argc]:
                source = sys.argv[argc].split('=',1)[1]
            elif '--file=' in sys.argv[argc]:
                infile = sys.argv[argc].split('=',1)[1]
            elif '--tags=' in sys.argv[argc]:
                tags = sys.argv[argc].split('=',1)[1].split(',')
            elif '--prompt' in sys.argv[argc]:
                prompt = True
            elif '--view' in sys.argv[argc]:
                view = True
            else:
                break
            argc += 1

        if argc == (len(sys.argv) - 1):
            query_string = make_query_string(sys.argv[argc:])

        try:
            docid = cli.add(query_string, infile=infile, source=source, tags=tags, prompt=prompt)
        except KeyboardInterrupt:
            sys.exit(1)

        # dereference the cli object so that the database is flushed
        # FIXME: is there a better way to handle this?
        cli = None

        if view and docid:
            import_nci()
            xapers.nci.UI(xroot, cmd=['search', 'id:'+docid])

    ########################################
    elif cmd in ['update-all']:
        cli = xapers.cli.UI(xroot)
        cli.update_all()

    ########################################
    elif cmd in ['delete']:
        prompt = True

        argc = 2
        while True:
            if argc >= len(sys.argv):
                break
            elif '--noprompt' in sys.argv[argc]:
                prompt = False
            else:
                break
            argc += 1

        cli = xapers.cli.UI(xroot)
        cli.delete(make_query_string(sys.argv[argc:]), prompt=prompt)

    ########################################
    elif cmd in ['search','s']:
        cli = xapers.cli.UI(xroot)

        oformat = 'summary'
        limit = 20

        argc = 2
        while True:
            if argc >= len(sys.argv):
                break
            if '--output=' in sys.argv[argc]:
                oformat = sys.argv[argc].split('=')[1]
            elif '--limit=' in sys.argv[argc]:
                limit = int(sys.argv[argc].split('=')[1])
            else:
                break
            argc += 1

        if oformat not in ['summary','bibtex','tags','sources','keys','files']:
                logging.error("Unknown output format.")
                sys.exit(1)

        query = make_query_string(sys.argv[argc:])
        try:
            cli.search(query, oformat=oformat, limit=limit)
        except KeyboardInterrupt:
            sys.exit(1)

    ########################################
    elif cmd in ['bibtex','bib','b']:
        cli = xapers.cli.UI(xroot)
        argc = 2
        query = make_query_string(sys.argv[argc:])
        try:
            cli.search(query, oformat='bibtex')
        except KeyboardInterrupt:
            sys.exit(1)

    ########################################
    elif cmd in ['nci','view','v','show','select']:
        import_nci()

        if cmd == 'nci':
            args = sys.argv[2:]
        else:
            query = make_query_string(sys.argv[2:], require=False)
            args = ['search', query]

        try:
            xapers.nci.UI(xroot, cmd=args)
        except KeyboardInterrupt:
            sys.exit(1)

    ########################################
    elif cmd in ['tag','t']:
        cli = xapers.cli.UI(xroot)

        add_tags = []
        remove_tags = []

        argc = 2
        for arg in sys.argv[argc:]:
            if argc >= len(sys.argv):
                break
            if arg == '--':
                argc += 1
                continue
            if arg[0] == '+':
                add_tags.append(arg[1:])
            elif arg[0] == '-':
                remove_tags.append(arg[1:])
            else:
                break
            argc += 1

        if not add_tags and not remove_tags:
            logging.error("Must specify tags to add or remove.")
            sys.exit(1)

        if '' in add_tags:
            logging.error("Null tags not allowed.")
            sys.exit(1)

        query = make_query_string(sys.argv[argc:])
        cli.tag(query, add_tags, remove_tags)

    ########################################
    elif cmd in ['dumpterms']:
        cli = xapers.cli.UI(xroot)
        query = make_query_string(sys.argv[2:], require=False)
        cli.dumpterms(query)

    ########################################
    elif cmd in ['maxid']:
        db = xapers.cli.initdb(xroot)
        docid = 0
        for doc in db.search('*'):
            docid = max(docid, int(doc.docid))
        print 'id:%d' % docid

    ########################################
    elif cmd in ['count']:
        cli = xapers.cli.UI(xroot)
        query = make_query_string(sys.argv[2:], require=False)
        cli.count(query)

    ########################################
    elif cmd in ['export']:
        cli = xapers.cli.UI(xroot)
        outdir = sys.argv[2]
        query = make_query_string(sys.argv[3:])
        cli.export(outdir, query)

    ########################################
    elif cmd in ['restore']:
        cli = xapers.cli.UI(xroot)
        cli.restore()

    ########################################
    elif cmd in ['sources']:
        for source in xapers.source.list_sources():
            print source

    ########################################
    elif cmd in ['source2bib','s2b']:
        string = sys.argv[2]

        try:
            smod = xapers.source.get_source(string)
        except xapers.source.SourceError as e:
            logging.exception(e)
            sys.exit(1)

        try:
            logging.info("Retrieving bibtex...")
            bibtex = smod.get_bibtex()
            logging.info("done.")
        except Exception, e:
            logging.error("Could not retrieve bibtex:")
            logging.exception(e)
            sys.exit(1)

        try:
            print xapers.bibtex.Bibtex(bibtex)[0].as_string()
        except Exception, e:
            logging.error("Error parsing bibtex: %s")
            logging.exception(e)
            logging.error("Outputting raw...")
            print bibtex
            sys.exit(1)

    ########################################
    elif cmd in ['scandoc','sd']:
        infile = sys.argv[2]
        sources = xapers.source.scan_for_sources(infile)
        for ss in sources:
            print "%s" % (ss)

    ########################################
    elif cmd in ['version']:
        print "Ha!"

    ########################################
    elif cmd in ['help','h']:
        usage()
        sys.exit(0)

    ########################################
    else:
        msg = "Unknown command '%s'. See \"help\" for more information." % cmd
        logging.error(msg)
        sys.exit(1)
